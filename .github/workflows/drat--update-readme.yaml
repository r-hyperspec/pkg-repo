on: push

name: drat-readme

jobs:
  drat-readme:
    name: Update README
    runs-on: ubuntu-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0' # Allows corect dates in git history

      - uses: r-lib/actions/setup-r@master

      - name: update repo indices # needed if tar balls removed manually
        run: |
          install.packages("drat")
          drat::updateRepo(".")
        shell: Rscript {0}

      - name: Drat -- update README.md
        if: success()
        run: |
           # grab the portion of the file we want to re-use
           awk '/^# /, /^<!-- list of packages: start | DO NOT REMOVE THIS LINE -->/' README.md > README.tmp

           # =================================================================
           # Insert the list of packages (current versions)

           # This code should be optimized so that files in "Archive" dir
           # were not listed before passing to "xargs"

           echo "" >> README.tmp # add blank line
           echo "Packages currently residing here:"  >> README.tmp
           echo "" >> README.tmp # add blank line

           echo "Package       | Version       | Updated on    " >> README.tmp
           echo "------------- | ------------- | ------------- " >> README.tmp
           git ls-files -z .tar.gz '*.tar.gz'          |\
             xargs -0 -n 1 -I {} -- git log -1 --format="%as {}" {} |\
             grep \.tar\.gz$                           |\
             grep Archive -v                           |\
             sed 's/src\/contrib\///g'                 |\
             sed 's/_/ /g'                             |\
             sed 's/.tar.gz/ /g'                       |\
             awk '{print $2" | "$3" | "$1 }'           |\
             sort -t$'|' -k1i,1 -k2Vr,2                >> README.tmp

           echo "" >> README.tmp # add blank line

           # =================================================================
           # Insert the list of packages (old versions)

           # Do if any archived .tar.gz file exists
           if [[ -n $(find "src/contrib" -type f | grep "Archive" | grep '\.tar.gz$') ]]; then
             echo "Previous (archived) versions of the packages residing here: " >> README.tmp
             echo "" >> README.tmp # add blank line

             echo "Package       | Version       | Archived on   " >> README.tmp
             echo "------------- | ------------- | ------------- " >> README.tmp
             git ls-files -z .tar.gz '*Archive/*.tar.gz' |\
               xargs -0 -n 1 -I {} -- git log -1 --format="%as {}" {} |\
               sed 's/src\/contrib\/Archive\///g'        |\
               sed 's/\// /g'                            |\
               sed 's/_/ /g'                             |\
               sed 's/.tar.gz/ /g'                       |\
               awk '{print $3" | "$4" | "$1 }'           |\
               sort -t$'|' -k1i,1 -k2Vr,2                >> README.tmp
           fi

           # Create a new version of README.md
           mv README.tmp README.md

      - name: Commit and push
        if: success()
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name  "GitHub Actions"
          git commit README.md -m "Update README" || echo "Nothing to commit"
          git push origin                         || echo "Nothing to commit"
